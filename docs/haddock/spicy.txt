-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/sheepforce/Spicy#readme</a>
@package spicy
@version 0.0.0.1


-- | Definitions of auxiliary functions to deal with the GHC bug, making it
--   necessary to have all <a>runQ</a> expressions as untyped slices.
--   Functions in this module are not meant for direct use, but wrapped in
--   the <a>Math</a> module.
module Spicy.Math.Helper

-- | Vector vector dot product.
vvP :: Acc (Vector Double) -> Acc (Vector Double) -> Acc (Scalar Double)

-- | Vector matrix product.
vmP :: Acc (Vector Double) -> Acc (Matrix Double) -> Acc (Vector Double)

-- | Matrix vector product.
mvP :: Acc (Matrix Double) -> Acc (Vector Double) -> Acc (Vector Double)

-- | Matrix matrix product.
mmP :: Acc (Matrix Double) -> Acc (Matrix Double) -> Acc (Matrix Double)


-- | This module defines basic algebraic operations used throughout the
--   program. Numerical heavy and most other operations are implemented
--   using Accelerate, to provide parallel operations. Note that all
--   <a>runQ</a> provided functions must be typed without typeclasses but
--   by concrete types.
module Spicy.Math

-- | Intersection (subset) of two lists a and b.
(∩) :: Eq a => [a] -> [a] -> [a]

-- | Dot product of two <a>Vector</a>s.
(<.>) :: Vector Double -> Vector Double -> Double


-- | This module deals with the partitioning of the system, creation of
--   bonds, assignment of substructeres to layers and creation of ghost
--   atoms. Following conventions shall apply:
--   
--   <ul>
--   <li>highest level region has highest index</li>
--   <li>lowest level region has index 0 and contains the complete
--   system</li>
--   </ul>
module Spicy.MolecularSystem


-- | Spicy.Types contains the definition of all classes and data types,
--   that are used in Spicy. Mainly it takes care of the description of
--   molecules (structure, topology, potential energy surface, ...) and
--   computations on molecules in different software packages.
module Spicy.Types

-- | Have a class for the printing of the calculation niveau, which allows
--   to produce a very readable output.
class NiceShow a
niceShow :: NiceShow a => a -> String
niceComplex :: NiceShow a => a -> String

-- | All chemical elements. Have them very clear because force fields and
--   pdb names may interfer and are just arbitrary strings.
data Element
H :: Element
He :: Element
Li :: Element
Be :: Element
B :: Element
C :: Element
N :: Element
O :: Element
F :: Element
Ne :: Element
Na :: Element
Mg :: Element
Al :: Element
Si :: Element
P :: Element
S :: Element
Cl :: Element
Ar :: Element
K :: Element
Ca :: Element
Sc :: Element
Ti :: Element
V :: Element
Cr :: Element
Mn :: Element
Fe :: Element
Co :: Element
Ni :: Element
Cu :: Element
Zn :: Element
Ga :: Element
Ge :: Element
As :: Element
Se :: Element
Br :: Element
Kr :: Element
Rb :: Element
Sr :: Element
Y :: Element
Zr :: Element
Nb :: Element
Mo :: Element
Tc :: Element
Ru :: Element
Rh :: Element
Pd :: Element
Ag :: Element
Cd :: Element
In :: Element
Sn :: Element
Sb :: Element
Te :: Element
I :: Element
Xe :: Element
Cs :: Element
Ba :: Element
La :: Element
Ce :: Element
Pr :: Element
Nd :: Element
Pm :: Element
Sm :: Element
Eu :: Element
Gd :: Element
Tb :: Element
Dy :: Element
Ho :: Element
Er :: Element
Tm :: Element
Yb :: Element
Lu :: Element
Hf :: Element
Ta :: Element
W :: Element
Re :: Element
Os :: Element
Ir :: Element
Pt :: Element
Au :: Element
Hg :: Element
Tl :: Element
Pb :: Element
Bi :: Element
Po :: Element
At :: Element
Rn :: Element
Fr :: Element
Ra :: Element
Ac :: Element
Th :: Element
Pa :: Element
U :: Element
Np :: Element
Pu :: Element
Am :: Element
Cm :: Element
Bk :: Element
Cf :: Element
Es :: Element
Fm :: Element
Md :: Element
No :: Element
Lr :: Element
Rf :: Element
Db :: Element
Sg :: Element
Bh :: Element
Hs :: Element
Mt :: Element
Ds :: Element
Rg :: Element
Cn :: Element
Uut :: Element
Fl :: Element
Uup :: Element
Lv :: Element
Uus :: Element
Uuo :: Element

-- | An atom label. They may come from pdb or force field parameter files
--   or can be assigned by other ways just to distinguish specific atoms.
type AtomLabel = String

-- | These are labels for molecular mechanics software. The strings are
--   basically arbitrary and depending on the MM software used.
type FFType = String

-- | An Atom in a <a>Molecule</a>.
data Atom
Atom :: Element -> AtomLabel -> Bool -> FFType -> Maybe Double -> Vector Double -> Atom

-- | Chemical <a>Element</a> of the atom.
[_atom_Element] :: Atom -> Element

-- | Label, e.g. from a pdb, just for identification, can be empty.
[_atom_Label] :: Atom -> AtomLabel

-- | Boolean, telling if this is a pseudo atom, introduced because a bond
--   was broken.
[_atom_IsPseudo] :: Atom -> Bool

-- | Label depending on the MM software used, identifying topological atom.
[_atom_FFType] :: Atom -> FFType

-- | Possibly a partial charge.
[_atom_PCharge] :: Atom -> Maybe Double

-- | Coordinates of the atom, cartesian in R³. Relies on the parser to fill
--   with exactly 3 values.
[_atom_Coordinates] :: Atom -> Vector Double
atom_PCharge :: Lens' Atom (Maybe Double)
atom_Label :: Lens' Atom AtomLabel
atom_IsPseudo :: Lens' Atom Bool
atom_FFType :: Lens' Atom FFType
atom_Element :: Lens' Atom Element
atom_Coordinates :: Lens' Atom (Vector Double)

-- | A molecule (might be the whole system or just an ONIOM layer) and all
--   associated informations.
data Molecule
Molecule :: String -> Vector Atom -> IntMap IntSet -> Maybe Double -> Maybe (Vector Double) -> Maybe (Matrix Double) -> Molecule

-- | Comment or identifier of a molecule. Can be empty.
[_molecule_Label] :: Molecule -> String

-- | A <a>Vector</a> of Atoms.
[_molecule_Atoms] :: Molecule -> Vector Atom

-- | An IntMap, mapping the index of an <a>Atom</a> in the <a>Molecule</a>
--   to the indices of all <a>Atom</a>s, to which it binds.
[_molecule_Bonds] :: Molecule -> IntMap IntSet

-- | An energy, that might have been calculated.
[_molecule_Energy] :: Molecule -> Maybe Double

-- | A gradient, that might have been calculated.
[_molecule_Gradient] :: Molecule -> Maybe (Vector Double)

-- | A hessian, that might have been calculated.
[_molecule_Hessian] :: Molecule -> Maybe (Matrix Double)
molecule_Label :: Lens' Molecule String
molecule_Hessian :: Lens' Molecule (Maybe (Matrix Double))
molecule_Gradient :: Lens' Molecule (Maybe (Vector Double))
molecule_Energy :: Lens' Molecule (Maybe Double)
molecule_Bonds :: Lens' Molecule (IntMap IntSet)
molecule_Atoms :: Lens' Molecule (Vector Atom)

-- | A ONIOM layer with "pseudoatoms" (set 2 atoms in
--   <a>https://doi.org/10.1016/S0166-1280(98)00475-8</a>). While the
--   molecule is ordinary for Spicy, pseudo atoms need to be handled
--   differently, depending on the ONIOM type.
type LayerMolecule = (Int, Molecule)

-- | Trajectories are simply a vector of <a>Molecule</a>s.
type Trajectory = Vector Molecule

-- | A fragment is just a <a>Molecule</a> somehow (from user side)
--   distinguished by properties.
type Fragment = Molecule

-- | A supermolecule, which is the whole system (first), and then a
--   <a>Vector</a> of <a>Fragment</a>s, treated as separate
--   <a>Molecule</a>s. The whole supermolecule containts all <a>Atom</a>s
--   and all bonds, but is optional, as the structure can be completely
--   defined using the <a>Fragment</a>s. The supermolecule on the other
--   hand side is suposed to store the results of a calculation (energy,
--   gradient, ...).
type SuperMolecule = (Molecule, Vector Fragment)
instance GHC.Generics.Generic Spicy.Types.Molecule
instance GHC.Classes.Eq Spicy.Types.Molecule
instance GHC.Show.Show Spicy.Types.Atom
instance GHC.Generics.Generic Spicy.Types.Atom
instance GHC.Classes.Eq Spicy.Types.Atom
instance Control.DeepSeq.NFData Spicy.Types.Element
instance GHC.Generics.Generic Spicy.Types.Element
instance GHC.Enum.Enum Spicy.Types.Element
instance GHC.Classes.Ord Spicy.Types.Element
instance GHC.Read.Read Spicy.Types.Element
instance GHC.Classes.Eq Spicy.Types.Element
instance GHC.Show.Show Spicy.Types.Element


-- | A module which converts the internal Molecule representation to a
--   string, which is a common chemical file format, that can be read by
--   Avogadro, VMD, OpenBabel etc.. The writers are not fool proof with
--   respect to force field types, which should always be remembered when
--   usings its results.
module Spicy.MolWriter

-- | Write a .xyz file from a molecule.
writeXYZ :: Molecule -> String

-- | Write a .txyz (Tinkers xyz format) from a <a>Molecule</a>. The writer
--   trusts the <a>_atom_FFType</a> to be correct (if set) and will simply
--   write them out. Therefore it is possible, that wrong atom types can be
--   written. If they are not set, the writer will simply equalise all atom
--   types to 0, which is OK for visualisation but obviously not for MM.
writeTXYZ :: Molecule -> String

-- | Write a simplified .mol2 file (Tripos SYBYL) from a <a>Molecule</a>,
--   containing the atoms, connectivities (single bonds only) and partial
--   charges. The writer is not fool proof and will happily accept any
--   <a>_atom_FFType</a> that is supplied, even if it is not a TRIPOS SYBYL
--   atom type. This can lead to mol2 files that have correct topology and
--   geometry, but visualisation programs wont be able to assign correct
--   elements.
writeMOL2 :: Molecule -> String

-- | Write Spicy format, which is a custom format (not stable yet),
--   containing all informations, that are internally used to represent a
--   molecule.
writeSpicy :: Molecule -> String

-- | A molecule (might be the whole system or just an ONIOM layer) and all
--   associated informations.
data Molecule
Molecule :: String -> Vector Atom -> IntMap IntSet -> Maybe Double -> Maybe (Vector Double) -> Maybe (Matrix Double) -> Molecule

-- | Comment or identifier of a molecule. Can be empty.
[_molecule_Label] :: Molecule -> String

-- | A <a>Vector</a> of Atoms.
[_molecule_Atoms] :: Molecule -> Vector Atom

-- | An IntMap, mapping the index of an <a>Atom</a> in the <a>Molecule</a>
--   to the indices of all <a>Atom</a>s, to which it binds.
[_molecule_Bonds] :: Molecule -> IntMap IntSet

-- | An energy, that might have been calculated.
[_molecule_Energy] :: Molecule -> Maybe Double

-- | A gradient, that might have been calculated.
[_molecule_Gradient] :: Molecule -> Maybe (Vector Double)

-- | A hessian, that might have been calculated.
[_molecule_Hessian] :: Molecule -> Maybe (Matrix Double)


module Spicy.Parser

-- | Parse a .xyz file (has no connectivity, atom types or partioal
--   charges).
parseXYZ :: Parser Molecule

-- | Parse a .txyz file (Tinkers xyz format). It has coordinates and might
--   have connectivity and atom types.
parseTXYZ :: Parser Molecule

-- | Parse the "interesting" fields of a MOL2 file. This contains partial
--   charges as well as connectivity. There is no special understanding for
--   the atom types, that are available in MOL2 files. They will simply be
--   treated as the force field string.
parseMOL2 :: Parser Molecule

-- | Parser for the Spicy format used in this program. Represents fully all
--   informations stored in the <a>Molecule</a> type.
parseSpicy :: Parser Molecule

-- | Parse the "show" instance output for HMatrix' matrix Type, including
--   the dimension infos
parseHMatrix :: Parser (Matrix Double)


-- | This module provides scientific constants, conversion factors and
--   element data.
module Spicy.Data

-- | Covalent radii of elements in Angstrom taken from <a>Wikipedia</a>
covalentRadii :: Map Element Double


-- | The module collects data only used for unit testing, such as the
--   correct answers for unit tests.
module Spicy.UnitTests.Data

-- | Empty molecule.
moleculeEmpty :: Molecule

-- | Test <a>Molecule</a> with all information a <a>Molecule</a> could
--   have.
moleculeHFeCNxH2O :: Molecule

-- | Test <a>Molecule</a> with all informations a TXYZ could have (without
--   calling Tinker).
moleculeHFeCNxH2OTXYZ :: Molecule

-- | Test <a>Molecule</a> with all informations a XYZ could have.
moleculeHFeCNxH2OXYZ :: Molecule

-- | Test <a>Molecule</a> with all informations a TXYZ could have.
moleculeHFeCNxH2OMOL2 :: Molecule

-- | Test <a>Molecule</a> as TXYZ file.
textHFeCNxH2OTXYZ :: Text

-- | Test <a>Molecule</a> as XYZ file.
testHFeCNxH2OXYZ :: Text

-- | Test <a>Molecule</a> as MOL2 file.
testHFeCNxH2OMOL2 :: Text

-- | Test <a>Molecule</a> as Spicy file.
testHFeCNxH2OSpicy :: Text

module Spicy.Wrapper.ORCA

module Spicy.Wrapper.ORCA.Methods
