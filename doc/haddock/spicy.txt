-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/sheepforce/Spicy#readme</a>
@package spicy
@version 0.0.0.1


-- | This module defines basic algebraic operations used throughout the
--   program. Numerical heavy and most other operations are implemented
--   using Accelerate, to provide parallel operations. Note that all
--   <a>runQ</a> provided functions must be typed without typeclasses but
--   by concrete types.
--   
--   The operations here accept some insecurities (like not checking if
--   both vectors of a dot product have equal lenght) and trust the caller.
module Spicy.Math

-- | Dot product of two <a>Seq</a>s.
(<.>) :: Num a => Seq a -> Seq a -> a

-- | Length of a <a>Seq</a>.
vLength :: Floating a => Seq a -> a

-- | Distance between 2 points (<a>Seq</a>s).
vDistance :: Floating a => Seq a -> Seq a -> a

-- | Angle in radian between 2 <a>Seq</a>s.
vAngle :: Floating a => Seq a -> Seq a -> a

-- | 3D cross product of 2 <tt>Seqs</tt>
vCross :: Seq Double -> Seq Double -> Either String (Seq Double)


-- | This module deals with the partitioning of the system, creation of
--   bonds, assignment of substructeres to layers and creation of ghost
--   atoms. Following conventions shall apply:
--   
--   <ul>
--   <li>highest level region has highest index</li>
--   <li>lowest level region has index 0 and contains the complete
--   system</li>
--   </ul>
module Spicy.Molecule


-- | Spicy.Types contains the definition of all classes and data types,
--   that are used in Spicy. Mainly it takes care of the description of
--   molecules (structure, topology, potential energy surface, ...).
module Spicy.Types

-- | Use serial or parallel processing for large data structures. This
--   helps deciding on a per use base, if to evaluate in serial or
--   parallel, to avoid nested parallelism. Every method employing parallel
--   operations by Control.Parallel.Strategies should provide this switch
--   in Spicy.
data Strat
Serial :: Strat
Parallel :: Strat

-- | Alias for an unboxed matrix from the Array library. This type can
--   easily be converted to Accelerate's array type.
type UMatrix a = Array (Int, Int) a

-- | All chemical elements. Have them very clear because force fields and
--   pdb names may interfer and are just arbitrary strings.
data Element
H :: Element
He :: Element
Li :: Element
Be :: Element
B :: Element
C :: Element
N :: Element
O :: Element
F :: Element
Ne :: Element
Na :: Element
Mg :: Element
Al :: Element
Si :: Element
P :: Element
S :: Element
Cl :: Element
Ar :: Element
K :: Element
Ca :: Element
Sc :: Element
Ti :: Element
V :: Element
Cr :: Element
Mn :: Element
Fe :: Element
Co :: Element
Ni :: Element
Cu :: Element
Zn :: Element
Ga :: Element
Ge :: Element
As :: Element
Se :: Element
Br :: Element
Kr :: Element
Rb :: Element
Sr :: Element
Y :: Element
Zr :: Element
Nb :: Element
Mo :: Element
Tc :: Element
Ru :: Element
Rh :: Element
Pd :: Element
Ag :: Element
Cd :: Element
In :: Element
Sn :: Element
Sb :: Element
Te :: Element
I :: Element
Xe :: Element
Cs :: Element
Ba :: Element
La :: Element
Ce :: Element
Pr :: Element
Nd :: Element
Pm :: Element
Sm :: Element
Eu :: Element
Gd :: Element
Tb :: Element
Dy :: Element
Ho :: Element
Er :: Element
Tm :: Element
Yb :: Element
Lu :: Element
Hf :: Element
Ta :: Element
W :: Element
Re :: Element
Os :: Element
Ir :: Element
Pt :: Element
Au :: Element
Hg :: Element
Tl :: Element
Pb :: Element
Bi :: Element
Po :: Element
At :: Element
Rn :: Element
Fr :: Element
Ra :: Element
Ac :: Element
Th :: Element
Pa :: Element
U :: Element
Np :: Element
Pu :: Element
Am :: Element
Cm :: Element
Bk :: Element
Cf :: Element
Es :: Element
Fm :: Element
Md :: Element
No :: Element
Lr :: Element
Rf :: Element
Db :: Element
Sg :: Element
Bh :: Element
Hs :: Element
Mt :: Element
Ds :: Element
Rg :: Element
Cn :: Element
Uut :: Element
Fl :: Element
Uup :: Element
Lv :: Element
Uus :: Element
Uuo :: Element

-- | An atom label. They may come from pdb or force field parameter files
--   or can be assigned by other ways just to distinguish specific atoms.
type AtomLabel = Text

-- | These are labels for molecular mechanics software. The strings are
--   basically arbitrary and depending on the MM software used.
type FFType = Text

-- | An Atom in a <a>Molecule</a>. Atoms are compared by their indices only
--   and they must therefore be unique. The coordinates of the <a>Atom</a>
--   are defined as <a>Seq</a>, as this is extremely easy to concatenate
--   when building a coordinate vector.
data Atom
Atom :: Element -> AtomLabel -> Bool -> FFType -> Maybe Double -> Seq Double -> Atom

-- | Chemical <a>Element</a> of the atom.
[_atom_Element] :: Atom -> Element

-- | Label, e.g. from a pdb, just for identification, can be empty.
[_atom_Label] :: Atom -> AtomLabel

-- | Boolean, telling if this is a pseudo atom, introduced because a bond
--   was broken.
[_atom_IsPseudo] :: Atom -> Bool

-- | Label depending on the MM software used, identifying topological atom.
[_atom_FFType] :: Atom -> FFType

-- | Possibly a partial charge.
[_atom_PCharge] :: Atom -> Maybe Double

-- | Coordinates of the atom, cartesian in RÂ³. Relies on the parser to fill
--   with exactly 3 values.
[_atom_Coordinates] :: Atom -> Seq Double
atom_Element :: Lens' Atom Element
atom_Label :: Lens' Atom AtomLabel
atom_IsPseudo :: Lens' Atom Bool
atom_FFType :: Lens' Atom FFType
atom_PCharge :: Lens' Atom (Maybe Double)
atom_Coordinates :: Lens' Atom (Seq Double)

-- | A molecule, which might be the whole system, an ONIOM layer or a
--   fragment of the system, each containing possibly even higher layers
--   for ONIOM or fragments. Stores all associated informations of a layer.
--   
--   Starting from a top level molecule, all atoms and bonds of the system
--   are expected to be in the in this top layer (except pseudoatoms of
--   deeper layers). Therefore if atoms are in a deeper layers of the
--   recursion, their information is not used to describe a higher layer.
--   Instead, all atoms of deeper layers (except pseudoatoms) must be also
--   replicated in a higher layer.
data Molecule
Molecule :: Text -> IntMap Atom -> IntMap IntSet -> Seq Molecule -> Maybe Double -> Maybe (Vector Double) -> Maybe (UMatrix Double) -> Molecule

-- | Comment or identifier of a molecule. Can be empty.
[_molecule_Label] :: Molecule -> Text

-- | An <a>IntMap</a> of <a>Atom</a>s, <a>Atom</a>s identified by their
--   <a>Int</a> index.
[_molecule_Atoms] :: Molecule -> IntMap Atom

-- | An IntMap, mapping the index of an <a>Atom</a> in the <a>Molecule</a>
--   to the indices of all <a>Atom</a>s, to which it binds.
[_molecule_Bonds] :: Molecule -> IntMap IntSet

-- | A Molecule might contain other molecules. These might be fragments or
--   higher level ONIOM layers.
[_molecule_SubMol] :: Molecule -> Seq Molecule

-- | An energy, that might have been calculated.
[_molecule_Energy] :: Molecule -> Maybe Double

-- | A gradient, that might have been calculated.
[_molecule_Gradient] :: Molecule -> Maybe (Vector Double)

-- | A hessian, that might have been calculated.
[_molecule_Hessian] :: Molecule -> Maybe (UMatrix Double)
molecule_Label :: Lens' Molecule Text
molecule_Atoms :: Lens' Molecule (IntMap Atom)
molecule_Bonds :: Lens' Molecule (IntMap IntSet)
molecule_SubMol :: Lens' Molecule (Seq Molecule)
molecule_Energy :: Lens' Molecule (Maybe Double)
molecule_Gradient :: Lens' Molecule (Maybe (Vector Double))
molecule_Hessian :: Lens' Molecule (Maybe (UMatrix Double))

-- | Trajectories are simply <a>Seq</a>uences of <a>Molecule</a>s.
type Trajectory = Seq Molecule
instance GHC.Show.Show Spicy.Types.Molecule
instance GHC.Generics.Generic Spicy.Types.Molecule
instance GHC.Classes.Eq Spicy.Types.Molecule
instance GHC.Show.Show Spicy.Types.Atom
instance GHC.Generics.Generic Spicy.Types.Atom
instance GHC.Classes.Eq Spicy.Types.Atom
instance Control.DeepSeq.NFData Spicy.Types.Element
instance GHC.Generics.Generic Spicy.Types.Element
instance GHC.Enum.Enum Spicy.Types.Element
instance GHC.Classes.Ord Spicy.Types.Element
instance GHC.Read.Read Spicy.Types.Element
instance GHC.Classes.Eq Spicy.Types.Element
instance GHC.Show.Show Spicy.Types.Element
instance GHC.Classes.Eq Spicy.Types.Strat


-- | This module provides functions to manipulate basic data structures of
--   <a>Molecule</a>s, such as indexing.
module Spicy.Molecule.Util

-- | Check if a single <a>Molecule</a> layer has sane indices (<a>Key</a>)
--   in the <a>IntMap</a> for <a>_molecule_Atoms</a> and
--   <a>_molecule_SubMol</a>, meaning the bonds do not include
--   <a>Atom</a>s, that do not exist. Then recursively check if the
--   <a>Atom</a>s of deeper layers are proper subsets of the higher layer,
--   both for <a>_molecule_Atoms</a> and <a>_molecule_Bonds</a>. Also
--   checks if fragments of the same layer are disjoint. Returns the
--   <a>Molecule</a> without modifications if it is sane, a string with
--   description of the found problem otherwise. This check is exhaustive
--   and potentially expensive.
checkMolecule :: Molecule -> Either String Molecule

-- | Reindex a complete <a>Molecule</a>, including all its deeper layers in
--   <a>_molecule_SubMol</a>) by mappings from a global replacement Map,
--   mapping old to new indices. This function assumes, that your molecule
--   is sane in the overall assumptions of this program. This means that
--   the lower layers obey the counting scheme of the atoms of the higher
--   layers and pseudoatoms come last.
reIndexMolecule :: IntMap Int -> Molecule -> Either String Molecule

-- | Group by the first tuple element and within this group build an IntSet
--   of the the second tuple elements.
groupTupleSeq :: Seq (Int, Int) -> IntMap IntSet

-- | This function implements
--   [groupBy](http:/<i>hackage.haskell.org</i>package<i>base-4.12.0.0</i>docs/Data-List.html#v:groupBy)
--   as in Data.List: "The group function takes a list and returns a list
--   of lists such that the concatenation of the result is equal to the
--   argument. Moreover, each sublist in the result contains only equal
--   elements."
groupBy :: (a -> a -> Bool) -> Seq a -> Seq (Seq a)

-- | From some common parser informations, form the sub molecules.
makeSubMolsFromAnnoAtoms :: Seq (Int, (Int, Text), Atom) -> IntMap IntSet -> Seq Molecule


module Spicy.Parser

-- | Parse a .xyz file (has no connectivity, atom types or partioal
--   charges).
parseXYZ :: Parser Molecule

-- | Parse a Tinker XYZ formatted file. It has coordinates and might have
--   connectivity and atom types. This format and therefore parser are not
--   using any layers (recursions of <a>Molecule</a>).
parseTXYZ :: Parser Molecule

-- | Parse the "interesting" fields of a MOL2 file. This contains partial
--   charges as well as connectivity. There is no special understanding for
--   the atom types, that are available in MOL2 files. They will simply be
--   treated as the force field string. See
--   <a>http://chemyang.ccnu.edu.cn/ccb/server/AIMMS/mol2.pdf</a>.
parseMOL2 :: Parser Molecule

-- | Parse a PDB file as described in
--   <a>ftp://ftp.wwpdb.org/pub/pdb/doc/format_descriptions/Format_v33_A4.pdf</a>.
--   If parsing of a single ATOM or CONETC line fails, the parser will stop
--   there and ignore all the other records of same type, directly coming
--   after the failed one.
parsePDB :: Parser Molecule

-- | Parser for the Spicy format used in this program. Represents fully all
--   informations stored in the <a>Molecule</a> type.
parseSpicy :: Parser Molecule

-- | Parse the "show" instance output for HMatrix' matrix Type, including
--   the dimension infos
parseHMatrix :: Parser (Matrix Double)


-- | A module which converts the internal Molecule representation to a
--   string, which is a common chemical file format, that can be read by
--   Avogadro, VMD, OpenBabel etc.. The writers are not fool proof with
--   respect to force field types, which should always be remembered when
--   usings its results.
module Spicy.MolWriter

-- | Write a Molden XYZ file from a molecule. This format ignores all deep
--   level layers of a molecule.
writeXYZ :: Molecule -> Text

-- | Write a Tinker XYZ from a <a>Molecule</a>. The writer trusts the
--   <a>_atom_FFType</a> to be correct (if set) and will simply write them
--   out. Therefore it is possible, that wrong atom types can be written.
--   If they are not set, the writer will simply equalise all atom types to
--   0, which is OK for visualisation but obviously not for MM.
--   
--   This format ingores all deeper level layers of a molecule.
writeTXYZ :: Molecule -> Text

-- | Write a simplified .mol2 file (Tripos SYBYL) from a <a>Molecule</a>,
--   containing the atoms, connectivities (single bonds only) and partial
--   charges. The writer is not fool proof and will happily accept any
--   <a>_atom_FFType</a> that is supplied, even if it is not a TRIPOS SYBYL
--   atom type. This can lead to mol2 files that have correct topology and
--   geometry, but visualisation programs wont be able to assign correct
--   elements.
writeMOL2 :: Molecule -> Text
writePDB :: Molecule -> Text

-- | Write Spicy format, which is a custom format (not stable yet),
--   containing all informations, that are internally used to represent a
--   molecule.
writeSpicy :: Molecule -> String


-- | Definitions of auxiliary functions to deal with the GHC bug, making it
--   necessary to have all <a>runQ</a> expressions as untyped slices.
--   Functions in this module are not meant for direct use, but wrapped in
--   the <a>Math</a> module.
module Spicy.Math.Internal

-- | Get the <a>Atom</a> <a>_atom_Coordinates</a> from a <a>Molecule</a>
--   and convert to a plain <a>Vector</a>. This is therefore basically a
--   concatenation of all cartesian coordinates.
getCoordinates :: Strat -> Molecule -> Vector Double

-- | Calculate the distance matrix from the plain cartesian coordinate
--   vector in &lt;math&gt; with &lt;math&gt; being the number of atoms.
--   This functions cannot check, if the cartesian input vector has
--   actually 3 N elements and will crash if the number of elements is not
--   divisable by 3. The calling routine needs to check this. The resulting
--   matrix will be the square distance matrix.
distMat :: Acc (Vector Double) -> Acc (Matrix Double)


-- | This module provides scientific constants, conversion factors and
--   element data.
module Spicy.Data

-- | Covalent radii of elements in Angstrom taken from <a>Wikipedia</a>
covalentRadii :: Map Element Double


-- | The module collects data only used for unit testing, such as the
--   correct answers for unit tests.
module Spicy.UnitTests.Data

module Spicy.Wrapper.ORCA

module Spicy.Wrapper.ORCA.Methods
