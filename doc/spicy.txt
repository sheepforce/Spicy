-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/sheepforce/Spicy#readme</a>
@package spicy
@version 0.0.0.1


-- | This module deals with the partitioning of the system, creation of
--   bonds, assignment of substructeres to layers and creation of ghost
--   atoms. Following conventions shall apply:
--   
--   <ul>
--   <li>highest level region has highest index</li>
--   <li>lowest level region has index 0 and contains the complete
--   system</li>
--   </ul>
module Spicy.Molecule


-- | Spicy.Types contains the definition of all classes and data types,
--   that are used in Spicy. Mainly it takes care of the description of
--   molecules (structure, topology, potential energy surface, ...) and
--   computations on molecules in different software packages.
module Spicy.Types

-- | Have a class for the printing of the calculation niveau, which allows
--   to produce a very readable output.
class NiceShow a
niceShow :: NiceShow a => a -> String
niceComplex :: NiceShow a => a -> String

-- | Use serial or parallel processing for large data structures. This
--   helps deciding on a per use base, if to evaluate in serial or
--   parallel, to avoid nested parallelism. Every method employing parallel
--   operations by Control.Parallel.Strategies should provide this switch
--   in Spicy.
data Strat
Serial :: Strat
Parallel :: Strat

-- | Indexing type for recursive molecule structures. Count all layers with
--   a global index range (<a>Global</a>) or by fragment specific index
--   range (<a>Individual</a>).
data IndType
Global :: IndType
Individual :: IndType

-- | Alias for an unboxed matrix from the Array library. This type can
--   easily be converted to Accelerate's array type.
type UMatrix a = Array (Int, Int) a

-- | All chemical elements. Have them very clear because force fields and
--   pdb names may interfer and are just arbitrary strings.
data Element
H :: Element
He :: Element
Li :: Element
Be :: Element
B :: Element
C :: Element
N :: Element
O :: Element
F :: Element
Ne :: Element
Na :: Element
Mg :: Element
Al :: Element
Si :: Element
P :: Element
S :: Element
Cl :: Element
Ar :: Element
K :: Element
Ca :: Element
Sc :: Element
Ti :: Element
V :: Element
Cr :: Element
Mn :: Element
Fe :: Element
Co :: Element
Ni :: Element
Cu :: Element
Zn :: Element
Ga :: Element
Ge :: Element
As :: Element
Se :: Element
Br :: Element
Kr :: Element
Rb :: Element
Sr :: Element
Y :: Element
Zr :: Element
Nb :: Element
Mo :: Element
Tc :: Element
Ru :: Element
Rh :: Element
Pd :: Element
Ag :: Element
Cd :: Element
In :: Element
Sn :: Element
Sb :: Element
Te :: Element
I :: Element
Xe :: Element
Cs :: Element
Ba :: Element
La :: Element
Ce :: Element
Pr :: Element
Nd :: Element
Pm :: Element
Sm :: Element
Eu :: Element
Gd :: Element
Tb :: Element
Dy :: Element
Ho :: Element
Er :: Element
Tm :: Element
Yb :: Element
Lu :: Element
Hf :: Element
Ta :: Element
W :: Element
Re :: Element
Os :: Element
Ir :: Element
Pt :: Element
Au :: Element
Hg :: Element
Tl :: Element
Pb :: Element
Bi :: Element
Po :: Element
At :: Element
Rn :: Element
Fr :: Element
Ra :: Element
Ac :: Element
Th :: Element
Pa :: Element
U :: Element
Np :: Element
Pu :: Element
Am :: Element
Cm :: Element
Bk :: Element
Cf :: Element
Es :: Element
Fm :: Element
Md :: Element
No :: Element
Lr :: Element
Rf :: Element
Db :: Element
Sg :: Element
Bh :: Element
Hs :: Element
Mt :: Element
Ds :: Element
Rg :: Element
Cn :: Element
Uut :: Element
Fl :: Element
Uup :: Element
Lv :: Element
Uus :: Element
Uuo :: Element

-- | An atom label. They may come from pdb or force field parameter files
--   or can be assigned by other ways just to distinguish specific atoms.
type AtomLabel = String

-- | These are labels for molecular mechanics software. The strings are
--   basically arbitrary and depending on the MM software used.
type FFType = String

-- | An Atom in a <a>Molecule</a>.
data Atom
Atom :: Int -> Element -> AtomLabel -> Bool -> FFType -> Maybe Double -> Vector Double -> Atom

-- | The index of an atom in a molecule. For counting conventions refer to
--   <a>Molecule</a> and <a>IndType</a>.
[_atom_Index] :: Atom -> Int

-- | Chemical <a>Element</a> of the atom.
[_atom_Element] :: Atom -> Element

-- | Label, e.g. from a pdb, just for identification, can be empty.
[_atom_Label] :: Atom -> AtomLabel

-- | Boolean, telling if this is a pseudo atom, introduced because a bond
--   was broken.
[_atom_IsPseudo] :: Atom -> Bool

-- | Label depending on the MM software used, identifying topological atom.
[_atom_FFType] :: Atom -> FFType

-- | Possibly a partial charge.
[_atom_PCharge] :: Atom -> Maybe Double

-- | Coordinates of the atom, cartesian in RÂ³. Relies on the parser to fill
--   with exactly 3 values.
[_atom_Coordinates] :: Atom -> Vector Double
atom_PCharge :: Lens' Atom (Maybe Double)
atom_Label :: Lens' Atom AtomLabel
atom_IsPseudo :: Lens' Atom Bool
atom_Index :: Lens' Atom Int
atom_FFType :: Lens' Atom FFType
atom_Element :: Lens' Atom Element
atom_Coordinates :: Lens' Atom (Vector Double)

-- | A molecule, which might be the whole system, an ONIOM layer or a
--   fragment of the system, each containing possibly even higher layers
--   for ONIOM or fragments. Stores all associated informations of a layer.
--   
--   Starting from a top level molecule, all atoms and bonds of the system
--   are expected to be in the in this top layer (except pseudoatoms of
--   deeper layers). Therefore if atoms are in a deeper layers of the
--   recursion, their information is not used to describe a higher layer.
--   Instead, all atoms of deeper layers (except pseudoatoms) must be also
--   replicated in a higher layer.
--   
--   Two possible types of index countings are possible:
--   
--   <ul>
--   <li><b><i><a>Global</a></i></b>: All atoms in the system (which should
--   be present at the top layer molecule) except pseudoatoms are counted
--   in the top layer. The fragments might therefore not start at atom with
--   index 0, but depending on where they are in a higher level with higher
--   numbers. Pseudoatoms are counted after all other atoms are
--   counted.</li>
--   <li><b><i><a>Individual</a></i></b>: Counting happens for each
--   molecule individually. In this counting scheme, pseudoatoms do not
--   need any special treatment.</li>
--   </ul>
data Molecule
Molecule :: String -> Vector Atom -> IntMap IntSet -> Vector Molecule -> IndType -> Maybe Double -> Maybe (Vector Double) -> Maybe (UMatrix Double) -> Molecule

-- | Comment or identifier of a molecule. Can be empty.
[_molecule_Label] :: Molecule -> String

-- | A <a>Vector</a> of Atoms.
[_molecule_Atoms] :: Molecule -> Vector Atom

-- | An IntMap, mapping the index of an <a>Atom</a> in the <a>Molecule</a>
--   to the indices of all <a>Atom</a>s, to which it binds.
[_molecule_Bonds] :: Molecule -> IntMap IntSet

-- | A Molecule might contain other molecules. These might be fragments or
--   higher level ONIOM layers.
[_molecule_SubMol] :: Molecule -> Vector Molecule

-- | Which counting scheme for atoms is used in this representation. Must
--   be same for all layers.
[_molecule_IndType] :: Molecule -> IndType

-- | An energy, that might have been calculated.
[_molecule_Energy] :: Molecule -> Maybe Double

-- | A gradient, that might have been calculated.
[_molecule_Gradient] :: Molecule -> Maybe (Vector Double)

-- | A hessian, that might have been calculated.
[_molecule_Hessian] :: Molecule -> Maybe (UMatrix Double)
molecule_SubMol :: Lens' Molecule (Vector Molecule)
molecule_Label :: Lens' Molecule String
molecule_IndType :: Lens' Molecule IndType
molecule_Hessian :: Lens' Molecule (Maybe (UMatrix Double))
molecule_Gradient :: Lens' Molecule (Maybe (Vector Double))
molecule_Energy :: Lens' Molecule (Maybe Double)
molecule_Bonds :: Lens' Molecule (IntMap IntSet)
molecule_Atoms :: Lens' Molecule (Vector Atom)

-- | Trajectories are simply a vector of <a>Molecule</a>s.
type Trajectory = Vector Molecule
instance GHC.Show.Show Spicy.Types.Molecule
instance GHC.Generics.Generic Spicy.Types.Molecule
instance GHC.Classes.Eq Spicy.Types.Molecule
instance GHC.Show.Show Spicy.Types.Atom
instance GHC.Generics.Generic Spicy.Types.Atom
instance GHC.Classes.Eq Spicy.Types.Atom
instance Control.DeepSeq.NFData Spicy.Types.Element
instance GHC.Generics.Generic Spicy.Types.Element
instance GHC.Enum.Enum Spicy.Types.Element
instance GHC.Classes.Ord Spicy.Types.Element
instance GHC.Read.Read Spicy.Types.Element
instance GHC.Classes.Eq Spicy.Types.Element
instance GHC.Show.Show Spicy.Types.Element
instance GHC.Show.Show Spicy.Types.IndType
instance GHC.Classes.Eq Spicy.Types.IndType
instance GHC.Classes.Eq Spicy.Types.Strat


-- | This module provides functions to manipulate basic data structures of
--   <a>Molecule</a>s, such as indexing.
module Spicy.Molecule.Util

-- | Calculate new indices for <a>Molecule</a>s in the <a>Individual</a>
--   scheme, where each fragment is counted by itself without awareness for
--   other molecules. This relies on sane bonds in the <a>Molecule</a>. If
--   somewhere bonds are defined to non existing atoms, these bonds will be
--   lost.
--   
--   Reindex a single layer of a molecule (topmost) but ignore its deeper
--   layers. Reindexing is done based on a replacement map, which must not
--   have any holes. So Every index that appears in the molecule must also
--   appear in the replacement list, even if this maps to the same value.
--   Otherwise a <a>Left</a> error <a>String</a> will result.
--   
--   Substitute all indices in the bonding style <a>IntMap</a> by
--   replacements given in a <a>IntMap</a> <a>Int</a>. If keys of the old
--   bonding map do not appear in the replacement map, a <a>Left</a> error
--   <a>String</a> will be given. Therefore the replacement map must be
--   complete and no holes are allowed.
reIndexBonds :: IntMap Int -> IntMap IntSet -> Either String (IntMap IntSet)

-- | Given a list of <a>Key</a>s, delete all <a>Key</a>s in the list from
--   the original <a>IntMap</a>.
deleteIntMapByKeys :: [Key] -> IntMap a -> IntMap a

-- | Given a list of <a>Key</a>s, delete all <a>Key</a>s in the list from
--   the original <a>IntSet</a>.
deleteIntSetByKeys :: [Key] -> IntSet -> IntSet

-- | Given a replacement <a>IntMap</a> (<a>Key</a> is the old value, value
--   is the new <a>Key</a>), replace the <a>Key</a>s from the old
--   <a>IntMap</a> with the ones from the replacement <a>IntMap</a>. If a
--   key cannot be found in the replacement <a>IntMap</a>, the original Key
--   of the old <a>IntMap</a> will be kept.
updateKeys :: IntMap Int -> IntMap a -> IntMap a

-- | Given a replacement <a>IntMap</a>, replace all values in an original
--   <a>IntSet</a> by values from a replacement <a>IntMap</a>. Values from
--   the <a>IntSet</a>, that have no <a>Key</a> in the <a>IntMap</a> will
--   remain unchanged.
updateIntSet :: IntMap Int -> IntSet -> IntSet


-- | A module which converts the internal Molecule representation to a
--   string, which is a common chemical file format, that can be read by
--   Avogadro, VMD, OpenBabel etc.. The writers are not fool proof with
--   respect to force field types, which should always be remembered when
--   usings its results.
module Spicy.MolWriter

-- | Write a Molden XYZ file from a molecule. This format ignores all deep
--   level layers of a molecule.
writeXYZ :: Molecule -> Text

-- | Write a Tinker XYZ from a <a>Molecule</a>. The writer trusts the
--   <a>_atom_FFType</a> to be correct (if set) and will simply write them
--   out. Therefore it is possible, that wrong atom types can be written.
--   If they are not set, the writer will simply equalise all atom types to
--   0, which is OK for visualisation but obviously not for MM.
--   
--   This format ingores all deeper level layers of a molecule.
writeTXYZ :: Molecule -> Text

-- | Write a simplified .mol2 file (Tripos SYBYL) from a <a>Molecule</a>,
--   containing the atoms, connectivities (single bonds only) and partial
--   charges. The writer is not fool proof and will happily accept any
--   <a>_atom_FFType</a> that is supplied, even if it is not a TRIPOS SYBYL
--   atom type. This can lead to mol2 files that have correct topology and
--   geometry, but visualisation programs wont be able to assign correct
--   elements.
writeMOL2 :: Molecule -> Text

-- | Write Spicy format, which is a custom format (not stable yet),
--   containing all informations, that are internally used to represent a
--   molecule.
writeSpicy :: Molecule -> String

-- | A molecule, which might be the whole system, an ONIOM layer or a
--   fragment of the system, each containing possibly even higher layers
--   for ONIOM or fragments. Stores all associated informations of a layer.
--   
--   Starting from a top level molecule, all atoms and bonds of the system
--   are expected to be in the in this top layer (except pseudoatoms of
--   deeper layers). Therefore if atoms are in a deeper layers of the
--   recursion, their information is not used to describe a higher layer.
--   Instead, all atoms of deeper layers (except pseudoatoms) must be also
--   replicated in a higher layer.
--   
--   Two possible types of index countings are possible:
--   
--   <ul>
--   <li><b><i><a>Global</a></i></b>: All atoms in the system (which should
--   be present at the top layer molecule) except pseudoatoms are counted
--   in the top layer. The fragments might therefore not start at atom with
--   index 0, but depending on where they are in a higher level with higher
--   numbers. Pseudoatoms are counted after all other atoms are
--   counted.</li>
--   <li><b><i><a>Individual</a></i></b>: Counting happens for each
--   molecule individually. In this counting scheme, pseudoatoms do not
--   need any special treatment.</li>
--   </ul>
data Molecule
Molecule :: String -> Vector Atom -> IntMap IntSet -> Vector Molecule -> IndType -> Maybe Double -> Maybe (Vector Double) -> Maybe (UMatrix Double) -> Molecule

-- | Comment or identifier of a molecule. Can be empty.
[_molecule_Label] :: Molecule -> String

-- | A <a>Vector</a> of Atoms.
[_molecule_Atoms] :: Molecule -> Vector Atom

-- | An IntMap, mapping the index of an <a>Atom</a> in the <a>Molecule</a>
--   to the indices of all <a>Atom</a>s, to which it binds.
[_molecule_Bonds] :: Molecule -> IntMap IntSet

-- | A Molecule might contain other molecules. These might be fragments or
--   higher level ONIOM layers.
[_molecule_SubMol] :: Molecule -> Vector Molecule

-- | Which counting scheme for atoms is used in this representation. Must
--   be same for all layers.
[_molecule_IndType] :: Molecule -> IndType

-- | An energy, that might have been calculated.
[_molecule_Energy] :: Molecule -> Maybe Double

-- | A gradient, that might have been calculated.
[_molecule_Gradient] :: Molecule -> Maybe (Vector Double)

-- | A hessian, that might have been calculated.
[_molecule_Hessian] :: Molecule -> Maybe (UMatrix Double)


module Spicy.Parser

-- | Parse a .xyz file (has no connectivity, atom types or partioal
--   charges).
parseXYZ :: Parser Molecule

-- | Parse a Tinker XYZ formatted file. It has coordinates and might have
--   connectivity and atom types. This format and therefore parser are not
--   using any layers (recursions of <a>Molecule</a>).
parseTXYZ :: Parser Molecule

-- | Parse the "interesting" fields of a MOL2 file. This contains partial
--   charges as well as connectivity. There is no special understanding for
--   the atom types, that are available in MOL2 files. They will simply be
--   treated as the force field string.
parseMOL2 :: Parser Molecule

-- | Parser for the Spicy format used in this program. Represents fully all
--   informations stored in the <a>Molecule</a> type.
parseSpicy :: Parser Molecule

-- | Parse the "show" instance output for HMatrix' matrix Type, including
--   the dimension infos
parseHMatrix :: Parser (Matrix Double)


-- | Definitions of auxiliary functions to deal with the GHC bug, making it
--   necessary to have all <a>runQ</a> expressions as untyped slices.
--   Functions in this module are not meant for direct use, but wrapped in
--   the <a>Math</a> module.
module Spicy.Math.Internal

-- | Get the <a>Atom</a> <a>_atom_Coordinates</a> from a <a>Molecule</a>
--   and convert to a plain <a>Vector</a>. This is therefore basically a
--   concatenation of all cartesian coordinates
getCoordinates1 :: Strat -> Molecule -> Vector Double
getCoordinates2 :: Strat -> Molecule -> Vector Double


-- | This module defines basic algebraic operations used throughout the
--   program. Numerical heavy and most other operations are implemented
--   using Accelerate, to provide parallel operations. Note that all
--   <a>runQ</a> provided functions must be typed without typeclasses but
--   by concrete types.
--   
--   The operations here accept some insecurities (like not checking if
--   both vectors of a dot product have equal lenght) and trust the caller.
module Spicy.Math

-- | Intersection (subset) of two lists a and b.
(â©) :: Eq a => [a] -> [a] -> [a]

-- | Dot product of two <a>Vector</a>s.
(<.>) :: (Storable a, Num a) => Vector a -> Vector a -> a

-- | Length of a <a>Vector</a>.
vLength :: (Storable a, Floating a) => Vector a -> a

-- | Distance between 2 points (<a>Vector</a>s).
vDistance :: (Storable a, Floating a) => Vector a -> Vector a -> a

-- | Angle in radian between 2 <a>Vector</a>s.
vAngle :: (Storable a, Floating a) => Vector a -> Vector a -> a

-- | 3D cross product of 2 <a>Vectors</a>
vCross :: Vector Double -> Vector Double -> Vector Double


-- | This module provides scientific constants, conversion factors and
--   element data.
module Spicy.Data

-- | Covalent radii of elements in Angstrom taken from <a>Wikipedia</a>
covalentRadii :: Map Element Double


-- | The module collects data only used for unit testing, such as the
--   correct answers for unit tests.
module Spicy.UnitTests.Data

-- | Empty molecule.
moleculeEmpty :: Molecule

-- | Test <a>Molecule</a> with all information a <a>Molecule</a> could
--   have.
moleculeHFeCNxH2O :: Molecule

-- | Test <a>Molecule</a> with all informations a TXYZ could have (without
--   calling Tinker).
moleculeHFeCNxH2OTXYZ :: Molecule

-- | Test <a>Molecule</a> with all informations a XYZ could have.
moleculeHFeCNxH2OXYZ :: Molecule

-- | Test <a>Molecule</a> with all informations a TXYZ could have.
moleculeHFeCNxH2OMOL2 :: Molecule

-- | Test <a>Molecule</a> as TXYZ file.
textHFeCNxH2OTXYZ :: Text

-- | Test <a>Molecule</a> as XYZ file.
testHFeCNxH2OXYZ :: Text

-- | Test <a>Molecule</a> as MOL2 file.
testHFeCNxH2OMOL2 :: Text

-- | Test <a>Molecule</a> as Spicy file.
testHFeCNxH2OSpicy :: Text

module Spicy.Wrapper.ORCA

module Spicy.Wrapper.ORCA.Methods
