variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - update
  - build
  - docs

# The Nix before script. Cabal scripts defined locally.
before_script:
  # Setup nix channels
  - nix-channel --list;
  - nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs;
  - nix-channel --update;
  - nix-channel --list;
  - export NIX_PATH=nixpkgs=/root/.nix-defexpr/channels/nixpkgs
  # Install dependencies
  - nix-env -iA nixpkgs.bash nixpkgs.git nixpkgs.niv nixpkgs.openssh;
  - export NIXPKGS_ALLOW_UNFREE=1;
  # QChem configuration for external packages and tuning.
  - export NIXQC_SRCURL=http://sol
  - export NIXQC_AVX=1
  # Authenticate runner to allow pushing to the repo
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - git config --global user.email "phillip.seeber@googlemail.com"
  - git config --global user.name "sheepforce"
  - gitlab_hostname=$(echo "${CI_REPOSITORY_URL}" | sed -e 's|https\?://gitlab-ci-token:.*@||g' | sed -e 's|/.*||g')
  - ssh-keyscan "${gitlab_hostname}" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

# Build fully with Cabal without nix stuff.
cabalBuild:
  image: debian:buster
  stage: build
  tags:
    - largemem
  before_script:
    # Install dependencies
    - apt update && apt install -y curl gcc g++ libgmp-dev libncurses-dev libffi-dev make xz-utils tar perl wget libopenblas-dev
    # Install GHC-UP
    - mkdir -p $HOME/.cabal/bin $HOME/.ghcup/bin
    - export PATH=$HOME/.cabal/bin:$HOME/.ghcup/bin:$PATH
    - wget https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup
    - chmod +x x86_64-linux-ghcup && mv x86_64-linux-ghcup $HOME/.ghcup/bin/ghcup
    # Install Haskell toolchain
    - ghcup upgrade
    - ghcup install ghc 8.10.5
    - ghcup install cabal
    - ghcup set ghc 8.10.5
    - cabal update
  script:
    - cabal build
  cache:
    paths:
      - dist-newstyle

# Quick cabal build, that just should generate the docs.
cabalDocs:
  image: debian:buster
  stage: docs
  before_script:
    # Install dependencies
    - apt update && apt install -y curl gcc g++ libgmp-dev libncurses-dev libffi-dev make xz-utils tar perl wget libopenblas-dev
    # Install GHC-UP
    - mkdir -p $HOME/.cabal/bin $HOME/.ghcup/bin
    - export PATH=$HOME/.cabal/bin:$HOME/.ghcup/bin:$PATH
    - wget https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup
    - chmod +x x86_64-linux-ghcup && mv x86_64-linux-ghcup $HOME/.ghcup/bin/ghcup
    # Install Haskell toolchain
    - ghcup upgrade
    - ghcup install ghc 8.10.5
    - ghcup install cabal
    - ghcup set ghc 8.10.5
    - cabal update
  script:
    - cabal haddock -f dev
    - cp -r $(dirname $(cabal haddock -f dev 2>/dev/null | tail -n 1)) public
    - ls -lah public/
  artifacts:
    paths:
      - public
  cache:
    paths:
      - dist-newstyle

# Reproducible nix build with everything pinned and all dependencies build.
nixWrapBuild:
  stage: build
  tags:
    - nix
    - turbomole
  script:
    - nix-build nix/default.nix --arg wrap true -A spicy.components.library
    - nix-build nix/default.nix --arg wrap true -A spicy.components.exes
    - nix-build nix/default.nix --arg wrap true -A spicy.components.tests
  only:
    refs:
      - master
      - release
      - merge_requests

# Nix build with Spicy only.
nixBuild:
  stage: build
  tags:
    - nix
    - turbomole
  script:
    - nix-build nix/default.nix --arg wrap false -A spicy.components.library
    - nix-build nix/default.nix --arg wrap false -A spicy.components.exes
    - nix-build nix/default.nix --arg wrap false -A spicy.components.tests
  only:
    refs:
      - develop
      - master
      - release
      - merge_requests

# A fully static build of spicy. Uses same pins as release build.
nixStaticBuild:
  stage: build
  tags:
    - nix
    - turbomole
  script:
    - cp $(nix-build --arg static true nix/default.nix -A spicy.components.exes)/bin/spicy spicy
  artifacts:
    when: always
    paths:
      - spicy
    expire_in: 1 year
  only:
    refs:
      - master
      - release
      - delevop
      - merge_requests

# Automatic niv updates and merge requests.
nivUpdate:
  stage: update
  tags:
    - nix
  script:
    # Make the pr script available
    - cp ./.gitlab/createmr.sh /tmp/.
    # Perform the update in a new branch and push changes.
    - git fetch origin
    - url_host=$(echo "${CI_REPOSITORY_URL}" | sed -e 's|https\?://gitlab-ci-token:.*@|ssh://git@|g')
    - echo "${url_host}"
    - git remote set-url --push origin "${url_host}"
    - git checkout develop
    - git checkout -b updates/niv
    - git pull origin updates/niv
    - niv update
    - git commit -a -m "niv upstream updates" || echo "Nothing to commit"
    - git push -u origin updates/niv
    # Make a new merge request
    - cp /tmp/createmr.sh ./.gitlab/createmr.sh
    - chmod +x ./.gitlab/createmr.sh
    - HOST=${CI_PROJECT_URL} CI_PROJECT_ID=${CI_PROJECT_ID} CI_COMMIT_REF_NAME="updates/niv" GITLAB_USER_ID="4452487" PRIVATE_TOKEN=${PRIVATE_TOKEN} ./.gitlab/createmr.sh
  rules:
    - if: $UPDATE_NIV == "1"
